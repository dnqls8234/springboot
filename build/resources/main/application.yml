spring:
  application:
    name: ums-service

  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:ums_db}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:20}
      minimum-idle: 5
      idle-timeout: 600000
      connection-timeout: 30000
      max-lifetime: 1800000

  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        show_sql: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:0}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 10
          max-idle: 8
          min-idle: 0

  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          ssl:
            trust: ${MAIL_SSL_TRUST:}

  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9093}
    producer:
      acks: all
      retries: 3
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    consumer:
      group-id: ums-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.mindshift.ums.event"

  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration

server:
  port: ${SERVER_PORT:8080}
  compression:
    enabled: true

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}

# UMS Configuration
ums:
  # API Configuration
  api:
    version: v1
    base-path: /v1

  # Security
  security:
    hmac:
      time-window: 300 # 5 minutes
      enabled: true
    idempotency:
      cache-ttl: 86400 # 24 hours

  # Rate Limiting
  rate-limit:
    enabled: true
    default-limit: 1000
    per-minute: 100
    per-hour: 1000
    per-day: 10000

  # Retry Configuration
  retry:
    max-attempts: 3
    initial-delay: 1000
    max-delay: 60000
    multiplier: 2

  # Message TTL
  message:
    default-ttl: 3600 # 1 hour
    max-ttl: 86400 # 24 hours

  # External Service Providers Configuration
  kakao:
    api-key: ${UMS_KAKAO_API_KEY:}
    sender-key: ${UMS_KAKAO_SENDER_KEY:}
    api-url: ${UMS_KAKAO_API_URL:https://api.kakaowork.com}

  sms:
    api-key: ${UMS_SMS_API_KEY:}
    from-number: ${UMS_SMS_FROM_NUMBER:}
    api-url: ${UMS_SMS_API_URL:https://api.coolsms.co.kr}

  email:
    from-email: ${UMS_EMAIL_FROM_EMAIL:noreply@mindshift.com}
    from-name: ${UMS_EMAIL_FROM_NAME:UMS Service}

  fcm:
    server-key: ${UMS_FCM_SERVER_KEY:}
    project-id: ${UMS_FCM_PROJECT_ID:}

  # Kafka Topics
  kafka:
    topics:
      message-requested: ums.message.requested.v1
      message-dispatched: ums.message.dispatched.v1
      message-delivered: ums.message.delivered.v1
      message-failed: ums.message.failed.v1
      message-dlq: ums.message.dlq

  # Sandbox Mode
  sandbox:
    enabled: false
    test-numbers:
      - "01000000000"
      - "01000000001"

# Logging
logging:
  level:
    com.mindshift.ums: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/ums-service.log
    max-size: 10MB
    max-history: 30

# SpringDoc OpenAPI Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: alpha
    tags-sorter: alpha